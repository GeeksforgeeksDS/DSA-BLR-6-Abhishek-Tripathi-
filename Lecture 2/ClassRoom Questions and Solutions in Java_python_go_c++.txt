
31

[
	[1 2 9 10 11]
	[12 15 56 57 61]
	[76 89 91 95 100]
	[101 112 131 141 150]
	[155 161 178 191 201]
]

left = 0;
right = 25
mid = 12

(m * n )/n = m

[
	[00 01 02 03 04]
	[10 11 12 13 14]
	[20 21 22 23 24]
	[30 31 32 33 34]
	[40 41 42 43 44]
]

25/2


left = 0
right = 5
mid = 2


int bs(int mat[][], int find){
	
	int left = 0;
	int rigth = n * n;
	
	while(left  < right){
		
		int mid = (left + right ) /2;
		
		if(mat[mid/n][mid%n]  == find){
			return true;
		}
		
		if(mat[mid/n][mid%n] < find){
				
		}else{
		
		}
	
	}


}





	bs(int mat[][], int find){
	
		int left = 0;
		int right = 5;
		
		while(left < right){
			
			int mid = (left + right)/2;
			
		
			if(mat[mid][0] >= find && mat[mid][m-1] <= find){
				findRow = mid;
				break;
			}
			
			if(find < mat[mid][0]){
				right = mid - 1;
			}else{
				left = mid + 1;
			
			}
		}
	}




int row = 0
int col = 0

int n = 3;
int m = 3;


for(int i=0; i<n; i++){
	
	if(mat[i][0] >= find && mat[i][m-1] <= find){
		findRow = i;
		break;
	}
}






n + m
n + logm


logn + logm == lognm

lognm










[1 2 9 12 15 56 76 89 91]






[
	[1 2 9 10 11]
	[12 15 56 56 56]
	[56 56 56 95 100]
	[101 112 131 141 150]
	[155 161 178 191 201]
]


















31


11

[
	[1   2 12]
	[11 15 22]
	[26 89 91]
]


(n + m)

25

[1 2 12 11 15 56 14 89 91]





int bs(int mat[][], int find){
	
	
	int row = 0;
	int col = n - 1;
	
	
	while(row < n && col >= 0){
		
		if(find == mat[row][col]) return true;
		
		
		if(mat[row][col] > find){
			
			col = col - 1;
		}else{
			
			row = row + 1;
		}
	
	}


}




https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/


Java:

class Solution {
   private static int binarySearch(int arr[], int search, boolean flag) {

		int start = 0;
		int end = arr.length - 1;

		int res = -1;

		while (start <= end) {

			int mid = (start + end) >> 1;

			if (arr[mid] == search) {

				res = mid;

				if (flag) {
					end = mid - 1;
				} else {
					start = mid + 1;
				}

			} else if (search < arr[mid]) {
				end = mid - 1;
			} else {
				start = mid + 1;
			}
		}

		return res;

	}

	public int[] searchRange(int[] nums, int target) {
		
		int left = binarySearch(nums,target,true);
		
		int right = binarySearch(nums, target, false);
		
		if(left != -1 && right != -1) {
			return new int[] {left,right};
		}else {
			
			return new int[] {-1,-1};
		}
	}

}

C++:


#include <vector>

class Solution {
private:
    static int binarySearch(const std::vector<int>& arr, int search, bool flag) {
        int start = 0;
        int end = arr.size() - 1;
        int res = -1;

        while (start <= end) {
            int mid = (start + end) >> 1;

            if (arr[mid] == search) {
                res = mid;
                if (flag) {
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            } else if (search < arr[mid]) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }

        return res;
    }

public:
    std::vector<int> searchRange(std::vector<int>& nums, int target) {
        int left = binarySearch(nums, target, true);
        int right = binarySearch(nums, target, false);

        if (left != -1 && right != -1) {
            return {left, right};
        } else {
            return {-1, -1};
        }
    }
};






Python:


class Solution:
    @staticmethod
    def binary_search(arr, search, flag):
        start = 0
        end = len(arr) - 1
        res = -1

        while start <= end:
            mid = (start + end) // 2

            if arr[mid] == search:
                res = mid
                if flag:
                    end = mid - 1
                else:
                    start = mid + 1
            elif search < arr[mid]:
                end = mid - 1
            else:
                start = mid + 1

        return res

    def search_range(self, nums, target):
        left = self.binary_search(nums, target, True)
        right = self.binary_search(nums, target, False)

        if left != -1 and right != -1:
            return [left, right]
        else:
            return [-1, -1]



Go:


package main

func binarySearch(arr []int, search int, flag bool) int {
	start := 0
	end := len(arr) - 1
	res := -1

	for start <= end {
		mid := (start + end) >> 1

		if arr[mid] == search {
			res = mid
			if flag {
				end = mid - 1
			} else {
				start = mid + 1
			}
		} else if search < arr[mid] {
			end = mid - 1
		} else {
			start = mid + 1
		}
	}

	return res
}

func searchRange(nums []int, target int) []int {
	left := binarySearch(nums, target, true)
	right := binarySearch(nums, target, false)

	if left != -1 && right != -1 {
		return []int{left, right}
	} else {
		return []int{-1, -1}
	}
}





https://leetcode.com/problems/search-a-2d-matrix/description/



Java:

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        if (m == 0)
            return false;
        int n = matrix[0].length;

        // binary search
        int left = 0, right = m * n - 1;
        int pivotIdx, pivotElement;
        while (left <= right) {
            pivotIdx = (left + right) / 2;
            
			
			pivotElement = matrix[pivotIdx / n][pivotIdx % n];
			
			
            if (target == pivotElement)
                return true;
            else {
                if (target < pivotElement)
                    right = pivotIdx - 1;
                else
                    left = pivotIdx + 1;
            }
        }
        return false;
    }
}


C++:

#include <vector>

class Solution {
public:
    bool searchMatrix(std::vector<std::vector<int>>& matrix, int target) {
        int m = matrix.size();
        if (m == 0)
            return false;
        int n = matrix[0].size();

        // binary search
        int left = 0, right = m * n - 1;
        int pivotIdx, pivotElement;
        while (left <= right) {
            pivotIdx = (left + right) / 2;
            
            pivotElement = matrix[pivotIdx / n][pivotIdx % n];
            
            if (target == pivotElement)
                return true;
            else {
                if (target < pivotElement)
                    right = pivotIdx - 1;
                else
                    left = pivotIdx + 1;
            }
        }
        return false;
    }
};



Python:


class Solution:
    def searchMatrix(self, matrix, target):
        m = len(matrix)
        if m == 0:
            return False
        n = len(matrix[0])

        # binary search
        left, right = 0, m * n - 1
        while left <= right:
            pivotIdx = (left + right) // 2
            pivotElement = matrix[pivotIdx // n][pivotIdx % n]

            if target == pivotElement:
                return True
            elif target < pivotElement:
                right = pivotIdx - 1
            else:
                left = pivotIdx + 1
        return False



Go:


// This code is a solution for searching a target in a 2D matrix using binary search in Go.

package main

func searchMatrix(matrix [][]int, target int) bool {
    rows := len(matrix)
    if rows == 0 {
        return false
    }
    columns := len(matrix[0])

    // binary search
    left := 0
    right := rows*columns - 1
    var pivotIndex, pivotElement int
    for left <= right {
        pivotIndex = (left + right) / 2
        
        pivotElement = matrix[pivotIndex/columns][pivotIndex%columns]
        
        if target == pivotElement {
            return true
        } else {
            if target < pivotElement {
                right = pivotIndex - 1
            } else {
                left = pivotIndex + 1
            }
        }
    }
    return false
}


https://leetcode.com/problems/search-a-2d-matrix-ii/

Java:

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        
                
        int row = matrix.length - 1;
        int col = matrix[0].length - 1;
        int i = 0;
        int j = col;
        while(i <= row && j >= 0){
            
            if(matrix[i][j] == target){
                return true;
            }else if(target > matrix[i][j]){
                i += 1;
            }else{
                j -= 1;
            }
        }
        
        return false;
    }
}


C++:


// searching a target in a 2D matrix
class Solution {
public:
    bool searchMatrix(std::vector<std::vector<int>>& matrix, int target) {
        int lastRow = matrix.size() - 1;
        int lastCol = matrix[0].size() - 1;
        int currentRow = 0;
        int currentCol = lastCol;
        
        while (currentRow <= lastRow && currentCol >= 0) {
            if (matrix[currentRow][currentCol] == target) {
                return true;
            } else if (target > matrix[currentRow][currentCol]) {
                currentRow += 1;
            } else {
                currentCol -= 1;
            }
        }
        
        return false;
    }
};

Python:


#searching a target in a 2D matrix to Python.
class Solution:
    def search_matrix(self, matrix, target):
        row_count = len(matrix) - 1
        col_count = len(matrix[0]) - 1
        current_row = 0
        current_col = col_count
        
        while current_row <= row_count and current_col >= 0:
            if matrix[current_row][current_col] == target:
                return True
            elif target > matrix[current_row][current_col]:
                current_row += 1
            else:
                current_col -= 1
        
        return False



Go:

//searching a target in a 2D matrix.

package main

func searchMatrix(matrix [][]int, target int) bool {
	rowCount := len(matrix) - 1
	colCount := len(matrix[0]) - 1
	i := 0
	j := colCount
	
	for i <= rowCount && j >= 0 {
		if matrix[i][j] == target {
			return true
		} else if target > matrix[i][j] {
			i += 1
		} else {
			j -= 1
		}
	}
	
	return false
}





https://leetcode.com/problems/koko-eating-bananas/description/


Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] 
bananas. The guards have gone and will come back in h hours.

Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some 
pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, 
she eats all of them instead and will not eat any more bananas during this hour.

Koko likes to eat slowly but still wants to finish eating all the bananas before the 
guards return.

Return the minimum integer k such that she can eat all the bananas within h hours.

 

Example 1:

Input: piles = [3,11,7,6], h = 8


3 6 7 11

min = 1


1 = 27 hours  > 8 (not possible)
2 = 2 + 3 + 4 + 6 = 15 hours > 8 (not possible)
3 = 1 + 2 + 3 + 4 = 9 > 8 (not possible)
4 = 1 + 2 + 2 + 3 = 8 >= 8 (possible)



max = 11

Output: 4
Example 2:

Input: piles = [30,11,23,4,20], h = 5
Output: 30
Example 3:

Input: piles = [30,11,23,4,20], h = 6
Output: 23


















